CAST(dbo.Conditioning_TestPoint_Cell_Grade.Cell_05 AS int) +
CAST(dbo.Conditioning_TestPoint_Cell_Grade.Cell_06 AS int) +
CAST(dbo.Conditioning_TestPoint_Cell_Grade.Cell_07 AS int) +
CAST(dbo.Conditioning_TestPoint_Cell_Grade.Cell_08 AS int) +
CAST(dbo.Conditioning_TestPoint_Cell_Grade.Cell_09 AS int) +
CAST(dbo.Conditioning_TestPoint_Cell_Grade.Cell_10 AS int) +
CAST(dbo.Conditioning_TestPoint_Cell_Grade.Cell_11 AS int) +
CAST(dbo.Conditioning_TestPoint_Cell_Grade.Cell_12 AS int) +
CAST(dbo.Conditioning_TestPoint_Cell_Grade.Cell_13 AS int) +
CAST(dbo.Conditioning_TestPoint_Cell_Grade.Cell_14 AS int) +
CAST(dbo.Conditioning_TestPoint_Cell_Grade.Cell_15 AS int) +
CAST(dbo.Conditioning_TestPoint_Cell_Grade.Cell_16 AS int) +
CAST(dbo.Conditioning_TestPoint_Cell_Grade.Cell_17 AS int) +
CAST(dbo.Conditioning_TestPoint_Cell_Grade.Cell_18 AS int) +
CAST(dbo.Conditioning_TestPoint_Cell_Grade.Cell_19 AS int) +
CAST(dbo.Conditioning_TestPoint_Cell_Grade.Cell_20 AS int) +
CAST(dbo.Conditioning_TestPoint_Cell_Grade.Cell_21 AS int) +
CAST(dbo.Conditioning_TestPoint_Cell_Grade.Cell_22 AS int) +
CAST(dbo.Conditioning_TestPoint_Cell_Grade.Cell_23 AS int) +
CAST(dbo.Conditioning_TestPoint_Cell_Grade.Cell_24 AS int) +
CAST(dbo.Conditioning_TestPoint_Cell_Grade.Cell_25 AS int) +
CAST(dbo.Conditioning_TestPoint_Cell_Grade.Cell_26 AS int) +
CAST(dbo.Conditioning_TestPoint_Cell_Grade.Cell_27 AS int) +
CAST(dbo.Conditioning_TestPoint_Cell_Grade.Cell_28 AS int) +
CAST(dbo.Conditioning_TestPoint_Cell_Grade.Cell_29 AS int) < 27) THEN 0
ELSE 1 END,
AEP = CASE
WHEN (CAST(dbo.Conditioning_TestPoint_Cell_Grade.Cell_30 AS int) +
CAST(dbo.Conditioning_TestPoint_Cell_Grade.Cell_31 AS int) < 2) THEN 0
ELSE 1 END,
[FEP SN] = SubString(dbo.StackBuildInfo.Fuel_End_Plate_Batch_Number, 12, 8),
[IC SN] = SubString(dbo.StackBuildInfo.IC_Batch, 12, 8),
[AEP SN] = SubString(dbo.StackBuildInfo.Air_End_Plate_Batch_Number, 12, 8),
CONFIG = SubString(dbo.StackBuildInfo.Fuel_End_Plate_Batch_Number, 5, 1) +
SubString(dbo.StackBuildInfo.IC_Batch, 5, 1),
Week = DatePart(week, dbo.StackBuildInfo.Stack_BuildSheet_Date),
[Rolling Week] = CASE
WHEN (dbo.StackBuildInfo.Stack_BuildSheet_Date > CAST(GetDate() -
180 AS Date)) THEN 1 ELSE 0 END
FROM dbo.StackBuildInfo
INNER JOIN dbo.Conditioning_TestPoint_Grade ON dbo.StackBuildInfo.Stack_ID =
dbo.Conditioning_TestPoint_Grade.Stack_ID
INNER JOIN dbo.Conditioning_TestPoint_Cell_Grade
ON dbo.Conditioning_TestPoint_Grade.Stack_ID =
dbo.Conditioning_TestPoint_Cell_Grade.Stack_ID AND
dbo.Conditioning_TestPoint_Grade.Date_Start =
dbo.Conditioning_TestPoint_Cell_Grade.Date_Start
WHERE dbo.StackBuildInfo.Stack_ID NOT LIKE 'A%' AND
dbo.StackBuildInfo.Stack_Series NOT LIKE '____[XYZ]%' AND
dbo.StackBuildInfo.Stack_BuildSheet_Date > '2016-1-1' AND
dbo.StackBuildInfo.IC_Batch LIKE '%IV_60%' AND
dbo.Conditioning_TestPoint_Grade.IsLatest_By_RoutingID = 1 AND
dbo.Conditioning_TestPoint_Grade.Routing_ID = 1 AND
dbo.Conditioning_TestPoint_Grade.IsLatest_ = 1 AND
dbo.Conditioning_TestPoint_Cell_Grade.Subtest_ = 'ALL'")
s6hdc <- sqlQuery(ch, "SELECT dbo.StackBuildInfo.Stack_ID,
dbo.StackBuildInfo.Stack_Series,
dbo.StackBuildInfo.Stack_BuildSheet_Date,
dbo.StackBuildInfo.Fuel_End_Plate_Batch_Number,
dbo.StackBuildInfo.IC_Batch,
dbo.StackBuildInfo.Air_End_Plate_Batch_Number,
dbo.Conditioning_TestPoint_Grade.Date_Start,
dbo.Conditioning_TestPoint_Grade.Grade_FG,
FEP = CASE
WHEN (CAST(dbo.Conditioning_TestPoint_Cell_Grade.Cell_01 AS int) +
CAST(dbo.Conditioning_TestPoint_Cell_Grade.Cell_02 AS int) < 2) THEN 0
ELSE 1 END,
MIDCELL = CASE
WHEN (CAST(dbo.Conditioning_TestPoint_Cell_Grade.Cell_03 AS int) +
CAST(dbo.Conditioning_TestPoint_Cell_Grade.Cell_04 AS int) +
CAST(dbo.Conditioning_TestPoint_Cell_Grade.Cell_05 AS int) +
CAST(dbo.Conditioning_TestPoint_Cell_Grade.Cell_06 AS int) +
CAST(dbo.Conditioning_TestPoint_Cell_Grade.Cell_07 AS int) +
CAST(dbo.Conditioning_TestPoint_Cell_Grade.Cell_08 AS int) +
CAST(dbo.Conditioning_TestPoint_Cell_Grade.Cell_09 AS int) +
CAST(dbo.Conditioning_TestPoint_Cell_Grade.Cell_10 AS int) +
CAST(dbo.Conditioning_TestPoint_Cell_Grade.Cell_11 AS int) +
CAST(dbo.Conditioning_TestPoint_Cell_Grade.Cell_12 AS int) +
CAST(dbo.Conditioning_TestPoint_Cell_Grade.Cell_13 AS int) +
CAST(dbo.Conditioning_TestPoint_Cell_Grade.Cell_14 AS int) +
CAST(dbo.Conditioning_TestPoint_Cell_Grade.Cell_15 AS int) +
CAST(dbo.Conditioning_TestPoint_Cell_Grade.Cell_16 AS int) +
CAST(dbo.Conditioning_TestPoint_Cell_Grade.Cell_17 AS int) +
CAST(dbo.Conditioning_TestPoint_Cell_Grade.Cell_18 AS int) +
CAST(dbo.Conditioning_TestPoint_Cell_Grade.Cell_19 AS int) +
CAST(dbo.Conditioning_TestPoint_Cell_Grade.Cell_20 AS int) +
CAST(dbo.Conditioning_TestPoint_Cell_Grade.Cell_21 AS int) +
CAST(dbo.Conditioning_TestPoint_Cell_Grade.Cell_22 AS int) +
CAST(dbo.Conditioning_TestPoint_Cell_Grade.Cell_23 AS int) +
CAST(dbo.Conditioning_TestPoint_Cell_Grade.Cell_24 AS int) +
CAST(dbo.Conditioning_TestPoint_Cell_Grade.Cell_25 AS int) +
CAST(dbo.Conditioning_TestPoint_Cell_Grade.Cell_26 AS int) +
CAST(dbo.Conditioning_TestPoint_Cell_Grade.Cell_27 AS int) +
CAST(dbo.Conditioning_TestPoint_Cell_Grade.Cell_28 AS int) +
CAST(dbo.Conditioning_TestPoint_Cell_Grade.Cell_29 AS int) < 27) THEN 0
ELSE 1 END,
AEP = CASE
WHEN (CAST(dbo.Conditioning_TestPoint_Cell_Grade.Cell_30 AS int) +
CAST(dbo.Conditioning_TestPoint_Cell_Grade.Cell_31 AS int) < 2) THEN 0
ELSE 1 END,
[FEP SN] = SubString(dbo.StackBuildInfo.Fuel_End_Plate_Batch_Number, 12, 8),
[IC SN] = SubString(dbo.StackBuildInfo.IC_Batch, 12, 8),
[AEP SN] = SubString(dbo.StackBuildInfo.Air_End_Plate_Batch_Number, 12, 8),
CONFIG = SubString(dbo.StackBuildInfo.Fuel_End_Plate_Batch_Number, 5, 1) +
SubString(dbo.StackBuildInfo.IC_Batch, 5, 1),
Week = DatePart(week, dbo.StackBuildInfo.Stack_BuildSheet_Date),
[Rolling Week] = CASE
WHEN (dbo.StackBuildInfo.Stack_BuildSheet_Date > CAST(GetDate() -
180 AS Date)) THEN 1 ELSE 0 END
FROM dbo.StackBuildInfo
INNER JOIN dbo.Conditioning_TestPoint_Grade ON dbo.StackBuildInfo.Stack_ID =
dbo.Conditioning_TestPoint_Grade.Stack_ID
INNER JOIN dbo.Conditioning_TestPoint_Cell_Grade
ON dbo.Conditioning_TestPoint_Grade.Stack_ID =
dbo.Conditioning_TestPoint_Cell_Grade.Stack_ID AND
dbo.Conditioning_TestPoint_Grade.Date_Start =
dbo.Conditioning_TestPoint_Cell_Grade.Date_Start
WHERE dbo.StackBuildInfo.Stack_ID NOT LIKE 'A%' AND
dbo.StackBuildInfo.Stack_Series NOT LIKE '____[XYZ]%' AND
dbo.StackBuildInfo.Stack_BuildSheet_Date > '2016-1-1' AND
dbo.StackBuildInfo.IC_Batch LIKE '%IV_60%' AND
dbo.Conditioning_TestPoint_Grade.IsLatest_By_RoutingID = 1 AND
dbo.Conditioning_TestPoint_Grade.Routing_ID = 1 AND
dbo.Conditioning_TestPoint_Grade.IsLatest_ = 1 AND
dbo.Conditioning_TestPoint_Cell_Grade.Subtest_ = 'ALL'")
View(s6hdc)
rm(a)
odbcCloseAll()
save.image("~/.RData")
s6hdcr <- s6hdc[s6hdc$"Rolling Week" == 1,]
s6hdcrGG <- s6hdcr[s6hdcr$CONFIG == "GG",]
s6hdcrGR <- s6hdcr[s6hdcr$CONFIG == "GR",]
s6hdcrSS <- s6hdcr[s6hdcr$CONFIG == "SS",]
summary(s6hdcrGG)
library(data.table)
GGhdcDT <- data.table(s6hdcrGG)
class(GGhdcDT)
?data.table
GGsum <- GGhdcDT[, mean=mean("FEP")]
GGsum <- GGhdcDT[, mean=mean("FEP"),]
GGsum <- GGhdcDT[, mean("FEP"),]
GGsum <- GGhdcDT[, mean(FEP),]
GGsum <- GGhdcDT[, mean(FEP),mean(MIDCELL), mean(AEP)]
GGsum <- GGhdcDT[, mean(FEP, MIDCELL, AEP)]
GGsum <- GGhdcDT[, mean(FEP, MIDCELL)]
GGsum <- GGhdcDT[, mean(FEP)]
GGsum <- GGhdcDT[, mean(MIDCELL)]
GGsum <- GGhdcDT[, mean(AEP)]
DT <- data.table(s6hdc)
View(GGhdcDT)
View(GGhdcDT)
rm(GGhdcDT)
View(DT)
GTPHDC <- c(DT(, mean(FEP), by = c("Rolling Week" == 1, CONFIG == "GG")))
GTPHDC <- c(DT[, mean(FEP), by = c("Rolling Week" == 1, CONFIG == "GG"))]
GTPHDC <- c(DT[, mean(FEP), by = c("Rolling Week" == 1, CONFIG == "GG")]
)
GTPHDC <- c(DT[, mean(FEP), by = c("Rolling Week" == 1, "CONFIG" == "GG")])
GTPHDC <- c(DT[, mean(FEP), by = c("Rolling Week", "CONFIG"])
GTPHDC <- c(DT[, mean(FEP), by = c("Rolling Week", "CONFIG")])
GTPHDC
GTPHDC <- c(DT[, mean(FEP), by = c("Rolling Week" == 1, "CONFIG")])
GTPHDC <- c(DT[, mean(FEP), by = c("Rolling Week", "CONFIG")])
GTPHDC <- c(DT[, mean(FEP), by = c("Rolling Week", "CONFIG")],DT[, mean(Midcell), by = c("Rolling Week", "CONFIG")],DT[, mean(AEP), by = c("Rolling Week", "CONFIG")])
GTPHDC <- c(DT[, mean(FEP), by = c("Rolling Week", "CONFIG")],DT[, mean(MIDCELL), by = c("Rolling Week", "CONFIG")],DT[, mean(AEP), by = c("Rolling Week", "CONFIG")])
GTPHDC
rm(s6hdcrGG, s6hdcrGR,s6hdcrSS)
rm(sdhdc)
rm(s6hdc)
rm(GGsum)
rm(GTPHDC)
DT[,list(mean = mean("FEP"),mean2 = mean("MIDCELL"), mean3 = mean("AEP")),by = c("Rolling Week", "CONFIG")]
warnings()
summary(DT)
DT[,list(mean = mean(FEP),mean2 = mean(MIDCELL), mean3 = mean(AEP)),by = c("Rolling Week", "CONFIG")]
DT[DT[DT$CONFIG == "GG"],list(mean = mean(FEP),mean2 = mean(MIDCELL), mean3 = mean(AEP)),by = c("Rolling Week", "CONFIG")]
DT[,list(FEP = mean(FEP),Midcell = mean(MIDCELL), AEP = mean(AEP)),by = c("Rolling Week", "CONFIG")]
DT[DT$`Rolling Week` == 1][,list(FEP = mean(FEP),Midcell = mean(MIDCELL), AEP = mean(AEP)),by = c("Rolling Week", "CONFIG")]
DT[DT$CONFIG == "GG" | DT$CONFIG == "SS" |DT$CONFIG == "GR"][,list(FEP = mean(FEP),Midcell = mean(MIDCELL), AEP = mean(AEP)),by = c("Rolling Week", "CONFIG")]
DTsummary<-DT[DT$CONFIG == "GG" | DT$CONFIG == "SS" |DT$CONFIG == "GR"][,list(FEP = mean(FEP),Midcell = mean(MIDCELL), AEP = mean(AEP)),by = c("Rolling Week", "CONFIG")]
View(DTsummary)
DTbyFEP <- DT[DT$CONFIG == "GG" | DT$CONFIG == "SS" |DT$CONFIG == "GR"][,list(FEP = mean(FEP),Midcell = mean(MIDCELL), AEP = mean(AEP)),by = c("CONFIG","FEP SN")]
View(DTbyFEP)
DTbyFEP <- DT[DT$CONFIG == "GG" | DT$CONFIG == "SS" |DT$CONFIG == "GR"][,list(FEP = mean(FEP),Midcell = mean(MIDCELL), AEP = mean(AEP), Volume = count(`FEP SN`)),by = c("CONFIG","FEP SN")]
install.packages("plyr")
library(plyr)
DTbyFEP <- DT[DT$CONFIG == "GG" | DT$CONFIG == "SS" |DT$CONFIG == "GR"][,list(FEP = mean(FEP),Midcell = mean(MIDCELL), AEP = mean(AEP), Volume = count(`FEP SN`)),by = c("CONFIG","FEP SN")]
DTbyFEP <- DT[DT$CONFIG == "GG" | DT$CONFIG == "SS" |DT$CONFIG == "GR"][,list(FEP = mean(FEP),Midcell = mean(MIDCELL), AEP = mean(AEP)),by = c("CONFIG","FEP SN")]
?mean
?number
?count
DTbyFEP <- DT[DT$CONFIG == "GG" | DT$CONFIG == "SS" |DT$CONFIG == "GR"][,list(FEP = mean(FEP),Midcell = mean(MIDCELL), AEP = mean(AEP), Volume = count(FEP)),by = c("CONFIG","FEP SN")]
DTbyFEP <- DT[DT$CONFIG == "GG" | DT$CONFIG == "SS" |DT$CONFIG == "GR"][,list(FEP = mean(FEP),Midcell = mean(MIDCELL), AEP = mean(AEP), Volume = count(FEP)[,2]),by = c("CONFIG","FEP SN")]
DTbyFEP <- DT[DT$CONFIG == "GG" | DT$CONFIG == "SS" |DT$CONFIG == "GR"][,list(FEP = mean(FEP),Midcell = mean(MIDCELL), AEP = mean(AEP), Volume = count(Stack_ID)[,2]),by = c("CONFIG","FEP SN")]
count(DT$Stack_ID)
count(DT$`FEP SN`)
count(DT,c(DT$`FEP SN`,DT$CONFIG))
count(DT,c(DT$`FEP SN''))
count(DT,c(DT$`FEP SN`))
count(DT, vars = 'FEP SN')
count(DT, vars = `FEP SN)
count(DT, vars = `FEP SN``)
count(DT, vars = `FEP SN`)
count(DT, vars = DT$`FEP SN`)
count(list(DT$`FEP SN`,DT$CONFIG)
)
count(DT$`FEP SN`)
DTbyFEP <- DT[DT$CONFIG == "GG" | DT$CONFIG == "SS" |DT$CONFIG == "GR"][,list(FEP = mean(FEP),Midcell = mean(MIDCELL), AEP = mean(AEP), Volume = count(`FEP SN`)[,2]),by = c("CONFIG","FEP SN")]
DTbyFEP <- DT[DT$CONFIG == "GG" | DT$CONFIG == "SS" |DT$CONFIG == "GR"][,list(FEP = mean(FEP),Midcell = mean(MIDCELL), AEP = mean(AEP), Volume = count(FEP)[,2]),by = c("CONFIG","FEP SN")]
DTbyFEP <- DT[DT$CONFIG == "GG" | DT$CONFIG == "SS" |DT$CONFIG == "GR"][,list(FEP = mean(FEP),Midcell = mean(MIDCELL), AEP = mean(AEP)),by = c("CONFIG","FEP SN")]
count(DT)
count(DT$`FEP SN`&DT$CONFIG)
library(plyr)
counts <- ddply(DT, .(DT$`FEP SN`, DT$CONFIG), nrow)
counts
counts <- ddply(DT[DT$CONFIG == "GG" | DT[DT$CONFIG == "GR" | DT[DT$CONFIG == "SS"], .(DT$`FEP SN`, DT$CONFIG), nrow)
counts <- ddply(DT[DT$CONFIG == "GG" | DT$CONFIG == "GR" | DT$CONFIG == "SS"], .(DT$`FEP SN`, DT$CONFIG), nrow)
counts
counts1 <- ddply(DT[DT$CONFIG == "GG" | DT$CONFIG == "GR" | DT$CONFIG == "SS"], .(DT$`FEP SN`, DT$CONFIG), nrow)
rm(counts1)
query <- "SELECT dbo.StackBuildInfo.Stack_ID,
dbo.StackBuildInfo.Stack_Series,
dbo.StackBuildInfo.Stack_BuildSheet_Date,
dbo.StackBuildInfo.Fuel_End_Plate_Batch_Number,
dbo.StackBuildInfo.IC_Batch,
dbo.StackBuildInfo.Air_End_Plate_Batch_Number,
dbo.Conditioning_TestPoint_Grade.Date_Start,
dbo.Conditioning_TestPoint_Grade.Grade_FG,
FEP = CASE
WHEN (CAST(dbo.Conditioning_TestPoint_Cell_Grade.Cell_01 AS int) +
CAST(dbo.Conditioning_TestPoint_Cell_Grade.Cell_02 AS int) < 2) THEN 0
ELSE 1 END,
MIDCELL = CASE
WHEN (CAST(dbo.Conditioning_TestPoint_Cell_Grade.Cell_03 AS int) +
CAST(dbo.Conditioning_TestPoint_Cell_Grade.Cell_04 AS int) +
CAST(dbo.Conditioning_TestPoint_Cell_Grade.Cell_05 AS int) +
CAST(dbo.Conditioning_TestPoint_Cell_Grade.Cell_06 AS int) +
CAST(dbo.Conditioning_TestPoint_Cell_Grade.Cell_07 AS int) +
CAST(dbo.Conditioning_TestPoint_Cell_Grade.Cell_08 AS int) +
CAST(dbo.Conditioning_TestPoint_Cell_Grade.Cell_09 AS int) +
CAST(dbo.Conditioning_TestPoint_Cell_Grade.Cell_10 AS int) +
CAST(dbo.Conditioning_TestPoint_Cell_Grade.Cell_11 AS int) +
CAST(dbo.Conditioning_TestPoint_Cell_Grade.Cell_12 AS int) +
CAST(dbo.Conditioning_TestPoint_Cell_Grade.Cell_13 AS int) +
CAST(dbo.Conditioning_TestPoint_Cell_Grade.Cell_14 AS int) +
CAST(dbo.Conditioning_TestPoint_Cell_Grade.Cell_15 AS int) +
CAST(dbo.Conditioning_TestPoint_Cell_Grade.Cell_16 AS int) +
CAST(dbo.Conditioning_TestPoint_Cell_Grade.Cell_17 AS int) +
CAST(dbo.Conditioning_TestPoint_Cell_Grade.Cell_18 AS int) +
CAST(dbo.Conditioning_TestPoint_Cell_Grade.Cell_19 AS int) +
CAST(dbo.Conditioning_TestPoint_Cell_Grade.Cell_20 AS int) +
CAST(dbo.Conditioning_TestPoint_Cell_Grade.Cell_21 AS int) +
CAST(dbo.Conditioning_TestPoint_Cell_Grade.Cell_22 AS int) +
CAST(dbo.Conditioning_TestPoint_Cell_Grade.Cell_23 AS int) +
CAST(dbo.Conditioning_TestPoint_Cell_Grade.Cell_24 AS int) +
CAST(dbo.Conditioning_TestPoint_Cell_Grade.Cell_25 AS int) +
CAST(dbo.Conditioning_TestPoint_Cell_Grade.Cell_26 AS int) +
CAST(dbo.Conditioning_TestPoint_Cell_Grade.Cell_27 AS int) +
CAST(dbo.Conditioning_TestPoint_Cell_Grade.Cell_28 AS int) +
CAST(dbo.Conditioning_TestPoint_Cell_Grade.Cell_29 AS int) < 27) THEN 0
ELSE 1 END,
AEP = CASE
WHEN (CAST(dbo.Conditioning_TestPoint_Cell_Grade.Cell_30 AS int) +
CAST(dbo.Conditioning_TestPoint_Cell_Grade.Cell_31 AS int) < 2) THEN 0
ELSE 1 END,
[FEP SN] = SubString(dbo.StackBuildInfo.Fuel_End_Plate_Batch_Number, 12, 8),
[IC SN] = SubString(dbo.StackBuildInfo.IC_Batch, 12, 8),
[AEP SN] = SubString(dbo.StackBuildInfo.Air_End_Plate_Batch_Number, 12, 8),
CONFIG = SubString(dbo.StackBuildInfo.Fuel_End_Plate_Batch_Number, 5, 1) +
SubString(dbo.StackBuildInfo.IC_Batch, 5, 1),
Week = DatePart(week, dbo.StackBuildInfo.Stack_BuildSheet_Date),
[Rolling Week] = CASE
WHEN (dbo.StackBuildInfo.Stack_BuildSheet_Date > CAST(GetDate() -
180 AS Date)) THEN 1 ELSE 0 END
FROM dbo.StackBuildInfo
INNER JOIN dbo.Conditioning_TestPoint_Grade ON dbo.StackBuildInfo.Stack_ID =
dbo.Conditioning_TestPoint_Grade.Stack_ID
INNER JOIN dbo.Conditioning_TestPoint_Cell_Grade
ON dbo.Conditioning_TestPoint_Grade.Stack_ID =
dbo.Conditioning_TestPoint_Cell_Grade.Stack_ID AND
dbo.Conditioning_TestPoint_Grade.Date_Start =
dbo.Conditioning_TestPoint_Cell_Grade.Date_Start
WHERE dbo.StackBuildInfo.Stack_ID NOT LIKE 'A%' AND
dbo.StackBuildInfo.Stack_Series NOT LIKE '____[XYZ]%' AND
dbo.StackBuildInfo.Stack_BuildSheet_Date > '2016-1-1' AND
dbo.StackBuildInfo.IC_Batch LIKE '%IV_60%' AND
dbo.Conditioning_TestPoint_Grade.IsLatest_By_RoutingID = 1 AND
dbo.Conditioning_TestPoint_Grade.Routing_ID = 1 AND
dbo.Conditioning_TestPoint_Grade.IsLatest_ = 1 AND
dbo.Conditioning_TestPoint_Cell_Grade.Subtest_ = 'ALL'"
ch <- odbcDriverConnect("driver={SQL Server};Server=sv-stacks\\sqlexpress;Database=Production;trusted_connection=yes")
library(RODBC)
ch <- odbcDriverConnect("driver={SQL Server};Server=sv-stacks\\sqlexpress;Database=Production;trusted_connection=yes")
test <- sqlQuery(ch, query)
rm(test)
odbcCloseAll()
a <- list(1:10, 2:10)
a
rm(a)
a <- data.frame()
nrow(a) <- 2
dim(a)
a <- dim(2, 10)
a <- dim(c(2, 10))
dim(a)
?dim
dim(a) <- c(2, 4)
a <- data.frame()
dim(a) <- c(2, 4)
a <- nrow(2)
a <- ncol(4)
a <- data.frame(matrix(NA, nrow = 2, ncol = 2))
b <- data.frame(matrix(NA, nrow = 3, ncol = 2))
a[,1] = c("a","b")
a[,2] = c(2, 5)
b[,1] = c("a","b","c")
b[,2] = c(1, 2, 3)
colnames(a) <- c("letter","number
")
colnames(b) <- c("letter","number")
a
b
a
b
colnames(a) <- c("letter","number")
a
merge(a, b, number)
merge(a, b, by = number)
merge(a, b, by = 'number')
merge(a, b, by = 'letter')
merge(b,a, by = 'letter')
library(RODBC)
ch <- odbcDriverConnect("driver={SQL Server};Server=sv-stacks\\sqlexpress;Database=Production;trusted_connection=yes")
rawdata <- sqlQuery(ch, "SELECT dbo.HB_BuildSheet_Info.StackList_Rev,
dbo.HB_BuildSheet_Info.IsLatest_,
dbo.HB_BuildSheet_Info.DateTime_Created,
dbo.HB_BuildSheet_Stack_List.Kit_Id,
dbo.HB_BuildSheet_Stack_List.Stack_ID,
dbo.HB_BuildSheet_Stack_List.Column_ID,
dbo.HB_BuildSheet_Stack_List.Module_ID,
dbo.HB_BuildSheet_Stack_List.Stack_Routing_ID,
dbo.StackBuildInfo.IC_Batch,
dbo.StackBuildInfo.Air_End_Plate_Batch_Number,
dbo.StackBuildInfo.Fuel_End_Plate_Batch_Number,
dbo.StackBuildInfo.Stack_BuildSheet_Date,
Config = SubString(dbo.StackBuildInfo.IC_Batch, 5, 1) +
SubString(dbo.StackBuildInfo.Fuel_End_Plate_Batch_Number, 5, 1),
IC_SN = SubString(dbo.StackBuildInfo.IC_Batch, 12, 8),
FEP_SN = SubString(dbo.StackBuildInfo.Fuel_End_Plate_Batch_Number, 12, 8)
FROM dbo.HB_BuildSheet_Info
INNER JOIN dbo.HB_BuildSheet_Stack_List ON dbo.HB_BuildSheet_Info.Kit_Id =
dbo.HB_BuildSheet_Stack_List.Kit_Id AND dbo.HB_BuildSheet_Info.StackList_Rev
= dbo.HB_BuildSheet_Stack_List.StackList_Rev
INNER JOIN dbo.StackBuildInfo ON dbo.HB_BuildSheet_Stack_List.Stack_ID =
dbo.StackBuildInfo.Stack_ID
WHERE dbo.HB_BuildSheet_Info.DateTime_Created > '5/1/17' AND
dbo.HB_BuildSheet_Stack_List.Kit_Id NOT LIKE '%VOID%' AND
(dbo.HB_BuildSheet_Stack_List.Stack_ID NOT LIKE '%RED%' AND
dbo.HB_BuildSheet_Stack_List.Stack_ID LIKE '__6%' AND
dbo.HB_BuildSheet_Stack_List.Stack_ID NOT LIKE '____[XYZ]%')")
rawdata <- data.table(rawdata)
library(data.table)
rawdata <- data.table(rawdata)
View(rawdata)
?count
library(plyr)
?count
a <- count(rawdata[Stack_Routing_ID == 1], vars = c(Stack_ID))
a <- count(rawdata[Stack_Routing_ID == 1], vars = c('Stack_ID'))
View(a)
b <- rawdata[, freq = count(rawdata[Stack_Routing_ID == 1], vars = rawdata$IsLatest_), by=Stack_ID]
b <- rawdata[, freq = count(rawdata[Stack_Routing_ID == 1], vars = 'IsLatest_'), by='Stack_ID']
b <- rawdata[, freq = count(rawdata[Stack_Routing_ID == 1], vars = 'IsLatest_'), by=Stack_ID]
b <- rawdata[, freq = count(rawdata[Stack_Routing_ID == 1], vars = c('IsLatest_'), by=Stack_ID]
b <- rawdata[, freq = sum(Stack_Routing_ID), by=Stack_ID]
b <- rawdata[, list(freq = sum(Stack_Routing_ID)), by=Stack_ID]
b <- rawdata[, list(freq = count(rawdata[Stack_Routing_ID == 1], vars = c('IsLatest_')), by=Stack_ID]
b <- rawdata[, list(freq = sum(Stack_Routing_ID)), by=Stack_ID]
View(b)
b <- rawdata[, list(freq = sum(IsLatest_)), by=Stack_ID]
c <- merge(a, b, by=freq)
c <- merge(a, b, by='freq'')
c <- merge(a, b, by='freq')
c <- merge(a, b, by='Stack_ID')
View(c)
stacksremoved <- c[freq.y == 0]
stacksremoved <- c[c$freq.y == 0]
stacksremoved <- c[c$freq.y == 0,]
View(stacksremoved)
test <- merge(stacksremoved[stacksremoved$Stack_ID], rawdata, by = 'Stack_ID')
test <- merge(stacksremoved[stacksremoved$Stack_ID,], rawdata, by = 'Stack_ID')
View(test)
test <- merge(stacksremoved, rawdata, by = 'Stack_ID')
?distinct
??distinct
uni <- unique(test[,1])
rm(uni)
rm(test)
save.image("~/S6ColumnData.RData")
rawdatagenealogy <- rawdata[Stack_ID, IC_SN, FEP_SN]
rawdatagenealogy <- rawdata['Stack_ID', 'IC_SN', 'FEP_SN']
rawdatagenealogy <- rawdata[c('Stack_ID', 'IC_SN', 'FEP_SN')]
rawdatagenealogy <- rawdata[,c('Stack_ID', 'IC_SN', 'FEP_SN')]
View(rawdatagenealogy)
View(stacksremoved)
stacksremoved2 <- merge(stacksremoved[,'Stack_ID'], rawdatagenealogy, by = 'Stack_ID')
stacksremoved2 <- merge(stacksremoved[,'Stack_ID'], rawdatagenealogy, by = Stack_ID)
stacksremoved2 <- merge(stacksremoved[,'Stack_ID'], rawdatagenealogy, by = "Stack_ID"")
stacksremoved2 <- merge(stacksremoved[,'Stack_ID'], rawdatagenealogy, by = "Stack_ID")
stacksremoved2 <- merge(stacksremoved[,Stack_ID], rawdatagenealogy, by = 'Stack_ID')
stacksremoved2 <- merge(stacksremoved[,c('Stack_ID')], rawdatagenealogy, by = 'Stack_ID')
stacksremoved2 <- merge(stacksremoved, rawdatagenealogy, by = 'Stack_ID')
View(stacksremoved2)
unique(stacksremoved2)
stacksremoved3 <- unique(stacksremoved2)
View(stacksremoved3)
stacksremovedgenealogy <- stacksremoved3
rm(stacksremoved2,stacksremoved3)
save.image("~/S6ColumnData.RData")
rm(rawdatagenealogy)
getwd()
setwd(paste(getwd(), "/MyProject/Jumpman23", sep = "")
)
getwd()
load("~/MyProject/Jumpman23/jumpman.RData")
rm(test)
rm(test2)
rm(testdest)
rm(x)
rm(xy)
rm(y)
rm(z)
full_jumpman <- distance(jumpman)
full_jumpman <- distance(head(jumpman,1000))
jumpman[223]
jumpman[,223]
jumpman[,223]
jumpman[223,]
jumpman[222,]
full_jumpman <- distance(jumpman[222,])
full_jumpman <- distance(jumpman[223:250,])
View(full_jumpman)
mapdist(c(40.72132319,-74.00973201),c(40.7095341,-74.0151411),mode="walking")
mapdist(c(40.77912607,-73.95490489),c(40.772633,-73.9559979),mode="walking")
mapdist(c(-74.00973201,40.72132319),c(-74.0151411,40.7095341),mode="walking")
mapdist(c(-73.95490489,40.77912607),c(-73.9559979,40.772633),mode="walking")
complete.cases(mapdist(c(-74.00973201,40.72132319),c(-74.0151411,40.7095341),mode="walking"))
a <- data.frame(matrix(1:4,nrow = 2, ncol = 2))
a
a[3] <- c(5, 6)
a
a
a <- data.frame(matrix(1:4,nrow = 2, ncol = 2))
a[,3] < c(5, 6)
a <- matrix(nrow = 2, ncol = 2)
a
a[1,] <- c(1, 2)
a
a[2,] <- 3
a
a[2,] <- c(3, NA)
a
complete.cases(a)
a <- mapdist(c(-74.00973201,40.72132319),c(-74.0151411,40.7095341),mode="walking")
a
b<- mapdist(c(-73.95490489,40.77912607),c(-73.9559979,40.772633),mode="walking")
b
class(a)
sapply(a, class)
sapply(b, class)
a[1]
unlist(a)
class(unlist(a))
pickup <- matrix(nrow = 2, ncol = 8)
pickup[1,] <- b
pickup[2,] <- a
pickup[2,] <- c(a[1],a[2],NA,NA,NA,NA,NA,NA)
pickup[2,] <- unlist(c(a[1],a[2],NA,NA,NA,NA,NA,NA))
sapply(pickup, class)
dim(pickup)
nrow(pickup)
pickup <- matrix(nrow = 2, ncol = 8)
dim(pickup)
pickup[1,] <- b
dim(pickup)
nrow(pickup)
b
pickup <- matrix(nrow = 2, ncol = 8)
pickup[1,] <- unlist(b)
dim(pickup)
pickup[2,] <- unlist(c(a[1],a[2],NA,NA,NA,NA,NA,NA))
dim(pickup)
pickup
source("distance.R")
full_jumpman <- distance(jumpman[222,])
View(full_jumpman)
source("distance.R")
full_jumpman <- distance(jumpman[222,])
View(full_jumpman)
full_jumpman <- distance(jumpman)
full_jumpman <- distance(jumpman[352,])
full_jumpman <- distance(jumpman[351,])
full_jumpman <- distance(jumpman[350,])
full_jumpman <- distance(jumpman[1,])
full_jumpman <- distance(head(jumpman,2))
full_jumpman <- distance(head(jumpman,2))
full_jumpman2 <- distance(head(jumpman,2))
full_jumpman2 <- distance(head(jumpman,1))
View(full_jumpman)
full_jumpman2 <- distance(head(jumpman,1))
source("distance.R")
full_jumpman2 <- distance(head(jumpman,1))
